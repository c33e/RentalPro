{"ast":null,"code":"var _jsxFileName = \"/Users/caoimhehennessy/Desktop/year 3/web dev/rental-pro/RentalPro/client/src/components/authorisation.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nrequire(\"dotenv\").config({\n  path: \"./config.env\"\n});\nrequire(\".config/database\").connect();\nconst express = require(\"express\");\nconst app = express();\napp.use(express.json());\n\n// Logic goes here\n// importing user context\nconst User = require(\"./model/user\");\nexport default function Auth(_ref) {\n  _s();\n  let {\n    setToken\n  } = _ref;\n  let [authMode, setAuthMode] = useState(\"signin\");\n  const changeAuthMode = () => {\n    setAuthMode(authMode === \"signin\" ? \"signup\" : \"signin\");\n  };\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const token = await loginUser({\n      email,\n      password\n    });\n    setToken(token);\n  };\n\n  // Register\n  app.post(\"/register\", async (req, res) => {\n    // Our register logic starts here\n    try {\n      // Get user input\n      //const { email, password } = req.body;\n      if (authMode === \"signin\") {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Authformcontainer\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"Authform\",\n            onSubmit: handleSubmit,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"formcontent\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"formtitle\",\n                children: \"Sign In\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-center\",\n                children: [\"Not a registered user yet?\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"link-primary\",\n                  onClick: changeAuthMode,\n                  children: \"Sign Up\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group mt-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Email address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"email\",\n                  className: \"form-control mt-1\",\n                  placeholder: \"Enter email\",\n                  onChange: e => setEmail(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group mt-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"password\",\n                  className: \"form-control mt-1\",\n                  placeholder: \"Enter password\",\n                  onChange: e => setPassword(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-grid gap-2 mt-3\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  className: \"btn-primary\",\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this);\n      }\n\n      // Validate user input\n      if (!(email && password)) {\n        res.status(400).send(\"All input is required\");\n      }\n\n      // check if user already exist\n      // Validate if user exist in our database\n      const oldUser = await User.findOne({\n        email\n      });\n      if (oldUser) {\n        return res.status(409).send(\"User Already Exist. Please Login\");\n      }\n\n      //Encrypt user password\n      encryptedPassword = await bcrypt.hash(password, 10);\n\n      // Create user in our database\n      const user = await User.create({\n        email: email.toLowerCase(),\n        // sanitize: convert email to lowercase\n        password: encryptedPassword\n      });\n\n      // Create token\n      const token = jwt.sign({\n        user_id: user._id,\n        email\n      }, process.env.TOKEN_KEY, {\n        expiresIn: \"2h\"\n      });\n      // save user token\n      user.token = token;\n\n      // return new user\n      res.status(201).json(user);\n    } catch (err) {\n      console.log(err);\n    }\n    // Our register logic ends here\n  });\n\n  // Login\n  app.post(\"/login\", async (req, res) => {\n    // Our login logic starts here\n    try {\n      // Get user input\n      //const { email, password } = req.body;\n\n      // Validate user input\n      if (!(email && password)) {\n        res.status(400).send(\"All input is required\");\n      }\n      // Validate if user exist in our database\n      const user = await User.findOne({\n        email\n      });\n      if (user && (await bcrypt.compare(password, user.password))) {\n        // Create token\n        const token = jwt.sign({\n          user_id: user._id,\n          email\n        }, process.env.TOKEN_KEY, {\n          expiresIn: \"2h\"\n        });\n\n        // save user token\n        user.token = token;\n\n        // user\n        res.status(200).json(user);\n      }\n      res.status(400).send(\"Invalid Credentials\");\n    } catch (err) {\n      console.log(err);\n    }\n    // Our register logic ends here\n\n    const auth = require(\"./middleware/auth\");\n    app.post(\"/welcome\", auth, (req, res) => {\n      res.status(200).send(\"Welcome ðŸ™Œ \");\n    });\n  });\n}\n_s(Auth, \"KHlq/fvIWIM975OP/zkJbMO4iEU=\");\n_c = Auth;\nmodule.exports = app;\nvar _c;\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"names":["require","config","path","connect","express","app","use","json","User","Auth","setToken","authMode","setAuthMode","useState","changeAuthMode","email","setEmail","password","setPassword","handleSubmit","e","preventDefault","token","loginUser","post","req","res","target","value","status","send","oldUser","findOne","encryptedPassword","bcrypt","hash","user","create","toLowerCase","jwt","sign","user_id","_id","process","env","TOKEN_KEY","expiresIn","err","console","log","compare","auth","module","exports"],"sources":["/Users/caoimhehennessy/Desktop/year 3/web dev/rental-pro/RentalPro/client/src/components/authorisation.js"],"sourcesContent":["require(\"dotenv\").config({ path: \"./config.env\" })\nrequire(\".config/database\").connect();\nconst express = require(\"express\");\n\nconst app = express();\n\napp.use(express.json());\n\n// Logic goes here\n// importing user context\nconst User = require(\"./model/user\");\n\nexport default function Auth({ setToken }) {\n  let [authMode, setAuthMode] = useState(\"signin\")\n\nconst changeAuthMode = () => {\n    setAuthMode(authMode === \"signin\" ? \"signup\" : \"signin\")\n  }\n\nconst [email, setEmail] = useState();\nconst [password, setPassword] = useState();\n\nconst handleSubmit = async e => {\n  e.preventDefault();\n  const token = await loginUser({\n    email,\n    password\n  });\n  setToken(token);\n}\n\n// Register\napp.post(\"/register\", async (req, res) => {\n  // Our register logic starts here\n  try {\n    // Get user input\n    //const { email, password } = req.body;\n    if (authMode === \"signin\") {\n    \n      return (\n        <div className=\"Authformcontainer\">\n          <form className=\"Authform\" onSubmit={handleSubmit}>\n            <div className=\"formcontent\">\n              <h3 className=\"formtitle\">Sign In</h3>\n              <div className=\"text-center\">\n                Not a registered user yet?{\" \"}\n                <span className=\"link-primary\" onClick={changeAuthMode}>\n                  Sign Up\n                </span>\n              </div>\n              <div className=\"form-group mt-3\">\n                <label>Email address</label>\n                <input\n                  type=\"email\"\n                  className=\"form-control mt-1\"\n                  placeholder=\"Enter email\"\n                  onChange={e => setEmail(e.target.value)}\n                />\n              </div>\n              <div className=\"form-group mt-3\">\n                <label>Password</label>\n                <input\n                  type=\"password\"\n                  className=\"form-control mt-1\"\n                  placeholder=\"Enter password\"\n                  onChange={e => setPassword(e.target.value)}\n                />\n              </div>\n              <div className=\"d-grid gap-2 mt-3\">\n                <button type=\"submit\" className=\"btn-primary\">\n                  Submit\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      )\n    }\n\n    // Validate user input\n    if (!(email && password)) {\n      res.status(400).send(\"All input is required\");\n    }\n\n    // check if user already exist\n    // Validate if user exist in our database\n    const oldUser = await User.findOne({ email });\n\n    if (oldUser) {\n      return res.status(409).send(\"User Already Exist. Please Login\");\n    }\n\n    //Encrypt user password\n    encryptedPassword = await bcrypt.hash(password, 10);\n\n    // Create user in our database\n    const user = await User.create({\n      email: email.toLowerCase(), // sanitize: convert email to lowercase\n      password: encryptedPassword,\n    });\n\n    // Create token\n    const token = jwt.sign(\n      { user_id: user._id, email },\n      process.env.TOKEN_KEY,\n      {\n        expiresIn: \"2h\",\n      }\n    );\n    // save user token\n    user.token = token;\n\n    // return new user\n    res.status(201).json(user);\n  } catch (err) {\n    console.log(err);\n  }\n  // Our register logic ends here\n});\n\n// Login\napp.post(\"/login\", async (req, res) => {\n\n  // Our login logic starts here\n  try {\n    // Get user input\n    //const { email, password } = req.body;\n\n    // Validate user input\n    if (!(email && password)) {\n      res.status(400).send(\"All input is required\");\n    }\n    // Validate if user exist in our database\n    const user = await User.findOne({ email });\n\n    if (user && (await bcrypt.compare(password, user.password))) {\n      // Create token\n      const token = jwt.sign(\n        { user_id: user._id, email },\n        process.env.TOKEN_KEY,\n        {\n          expiresIn: \"2h\",\n        }\n      );\n\n      // save user token\n      user.token = token;\n\n      // user\n      res.status(200).json(user);\n    }\n    res.status(400).send(\"Invalid Credentials\");\n  } catch (err) {\n    console.log(err);\n  }\n  // Our register logic ends here\n\n  const auth = require(\"./middleware/auth\");\n\n  app.post(\"/welcome\", auth, (req, res) => {\n  res.status(200).send(\"Welcome ðŸ™Œ \");\n  });\n\n});\n}\n\nmodule.exports = app;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}